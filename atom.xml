<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>麦可乐的博客</title>
  
  <subtitle>Stay hungry, stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://toyourheart163.github.io/"/>
  <updated>2021-04-14T09:51:26.480Z</updated>
  <id>https://toyourheart163.github.io/</id>
  
  <author>
    <name>toyourheart163</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 面试总结</title>
    <link href="https://toyourheart163.github.io/2021/04/07/python-interview/"/>
    <id>https://toyourheart163.github.io/2021/04/07/python-interview/</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-04-14T09:51:26.480Z</updated>
    
    <content type="html"><![CDATA[<p>HR 很 Nice</p><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试:"></a>笔试:</h3><h4 id="静态方法，类方法，以及成员方法的区别"><a href="#静态方法，类方法，以及成员方法的区别" class="headerlink" title="静态方法，类方法，以及成员方法的区别"></a>静态方法，类方法，以及成员方法的区别</h4><p>😭笔试时未写答案😓😓😓</p><p>回家后搜索</p><p>class 对象里的3种方法：</p><ul><li>静态方法检验类的逻辑 @staticmethod, 没有 self cls</li><li>类方法第一个参数使用 cls 关键字，不能实例化，@classmethod, 进行数据转换</li><li>成员方法即带 self 的实例的方法，可调用实例的属性，方法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crun</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">srun</span>():</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断对象的方法</span></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctinType, MethodType</span><br><span class="line"><span class="built_in">type</span>(Foo.crun())</span><br><span class="line"><span class="built_in">isinstance</span>(Foo.srun, MethodType)</span><br></pre></td></tr></tbody></table></figure><h4 id="2个列表去除重复并顺序排序"><a href="#2个列表去除重复并顺序排序" class="headerlink" title="2个列表去除重复并顺序排序"></a>2个列表去除重复并顺序排序</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">li1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">li2 = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面试时答案</span></span><br><span class="line">li3 = <span class="built_in">sorted</span>(li1)</span><br><span class="line">li4 = <span class="built_in">sorted</span>(li2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li3:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> li4:</span><br><span class="line">        li3.append(i)</span><br><span class="line">result = li3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回家后答案</span></span><br><span class="line">li1.extends(li2)</span><br><span class="line">result = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(li1)))</span><br></pre></td></tr></tbody></table></figure><blockquote><p>面试时使用算法思维，弄的时间长</p></blockquote><h4 id="幽灵公交车"><a href="#幽灵公交车" class="headerlink" title="幽灵公交车"></a>幽灵公交车</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">val, list1=[]</span>):</span></span><br><span class="line">    list1.append(val)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br><span class="line">        </span><br><span class="line">li1 = func(<span class="number">10</span>)</span><br><span class="line">li2 = func(<span class="string">'abc'</span>, [])</span><br><span class="line">li3 = func(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span> li1, li2, li3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 笔试时</span></span><br><span class="line">[<span class="number">10</span>] [<span class="string">'abc'</span>] [<span class="string">'abc'</span>, <span class="number">123</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回家后</span></span><br><span class="line">[<span class="number">10</span>] [<span class="string">'abc'</span>] [<span class="number">10</span>, <span class="number">123</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def func(val, list1=[]):</span></span><br><span class="line"><span class="string">    list1.append(val)</span></span><br><span class="line"><span class="string">    print(id(list1))</span></span><br><span class="line"><span class="string">    return list1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li3 is li1 # [10, 123]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><h4 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span>(<span class="params">Parrent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span>(<span class="params">Parrent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> Parrent.x, Child1.x, Child2.x</span><br><span class="line">Child1.x = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> Parrent.x, Child1.x, Child2.x</span><br><span class="line">Parrent.x = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span> Parrent.x, Child1.x, Child2.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面试时</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回家后</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><ul><li>子类的属性改变<strong>不</strong>影响父类</li><li>父类的属性改变影响子类</li></ul><h4 id="用多种方法反转字符串-並比较-如-def-string-reverse-quot-abcdef-quot-return-quot-fedcba-quot"><a href="#用多种方法反转字符串-並比较-如-def-string-reverse-quot-abcdef-quot-return-quot-fedcba-quot" class="headerlink" title="用多种方法反转字符串, 並比较, 如: def string_reverse(&quot;abcdef&quot;): return &quot;fedcba&quot;"></a>用多种方法反转字符串, 並比较, 如: <code>def string_reverse("abcdef"): return "fedcba"</code></h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 笔试时答案</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse1</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse2</span>(<span class="params">s</span>):</span></span><br><span class="line">    ss = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        ss += s.pop()</span><br><span class="line">    <span class="keyword">return</span> ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回家后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rev2</span>(<span class="params">s</span>):</span></span><br><span class="line">    ss = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        ss += s[i]</span><br><span class="line">    <span class="keyword">return</span> ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span>:</span></span><br><span class="line">    <span class="string">"""Iterator for looping over a sequence backwards."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index = self.index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data[self.index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rev3</span>(<span class="params">s</span>):</span></span><br><span class="line">    rev = Reverse(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(<span class="built_in">list</span>(rev))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rev4</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 二分法</span></span><br><span class="line">    l = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> l &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s                                        </span><br><span class="line">    ls = <span class="built_in">list</span>(s)</span><br><span class="line">    <span class="keyword">if</span> l % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        n = <span class="built_in">int</span>(l/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n = <span class="built_in">int</span>((l - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        ls[i], ls[l-<span class="number">1</span>-i] = ls[l-<span class="number">1</span>-i], ls[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(ls)</span><br></pre></td></tr></tbody></table></figure><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ul><li>学过面向对象吗?</li><li>写过最复杂的模块?</li><li>为什么离职?</li><li>之前工资是多少?</li></ul><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HR 很 Nice&lt;/p&gt;
&lt;h3 id=&quot;笔试&quot;&gt;&lt;a href=&quot;#笔试&quot; class=&quot;headerlink&quot; title=&quot;笔试:&quot;&gt;&lt;/a&gt;笔试:&lt;/h3&gt;&lt;h4 id=&quot;静态方法，类方法，以及成员方法的区别&quot;&gt;&lt;a href=&quot;#静态方法，类方法，以及成员方法的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>地下物流系统</title>
    <link href="https://toyourheart163.github.io/2020/08/04/underground-deliver-system/"/>
    <id>https://toyourheart163.github.io/2020/08/04/underground-deliver-system/</id>
    <published>2020-08-04T12:14:40.000Z</published>
    <updated>2021-03-12T10:36:26.190Z</updated>
    
    <content type="html"><![CDATA[<p>可替换, 中途退换货<br>自动驾驶(部分)<br>机器人<br>xray<br>防水火、地震、暴力</p><ul><li>医疗<br>急救包<br>器官捐赠<br>病人运送</li><li>快餐</li></ul><ul><li>快递<br>生鲜水果</li></ul><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可替换, 中途退换货&lt;br&gt;自动驾驶(部分)&lt;br&gt;机器人&lt;br&gt;xray&lt;br&gt;防水火、地震、暴力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;医疗&lt;br&gt;急救包&lt;br&gt;器官捐赠&lt;br&gt;病人运送&lt;/li&gt;
&lt;li&gt;快餐&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;快递&lt;br&gt;生鲜水果&lt;/li&gt;
      
    
    </summary>
    
    
    
      <category term="AI" scheme="https://toyourheart163.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>通信协议-聊天-邮递</title>
    <link href="https://toyourheart163.github.io/2020/06/22/protocol-chat-deliver/"/>
    <id>https://toyourheart163.github.io/2020/06/22/protocol-chat-deliver/</id>
    <published>2020-06-22T13:05:53.000Z</published>
    <updated>2021-03-12T10:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Unix-编程艺术"><a href="#Unix-编程艺术" class="headerlink" title="Unix 编程艺术"></a>Unix 编程艺术</h3><p>通信协议就像聊天传输信息一样</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">me &gt;&gt;&gt;&gt; you</span><br><span class="line">me &lt;===&gt; you</span><br><span class="line">me &gt;&gt;&gt; mime &gt;&gt; you</span><br><span class="line">me &lt;==&gt; mime &lt;==&gt; you</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><ul><li>按距离分类<ul><li>远</li><li>近</li></ul></li></ul><ul><li>传输过程中需要保密吗？<ul><li>加密、解密方法</li><li>混淆</li></ul></li><li>信息压缩</li><li>信息文本编码，读取的方法<ul><li>文本<ul><li>中英文</li><li>排版方式</li></ul></li><li>二进制</li></ul></li><li>传输频率<ul><li>多长传一次</li></ul></li><li>信息完整<ul><li>讲重点</li><li>是否动了手脚<ul><li>经手者</li></ul></li></ul></li><li>是否到达<ul><li>被抢劫了？</li></ul></li></ul><blockquote><p>Shell 有时比 python 还优雅</p></blockquote><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Unix-编程艺术&quot;&gt;&lt;a href=&quot;#Unix-编程艺术&quot; class=&quot;headerlink&quot; title=&quot;Unix 编程艺术&quot;&gt;&lt;/a&gt;Unix 编程艺术&lt;/h3&gt;&lt;p&gt;通信协议就像聊天传输信息一样&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang learing</title>
    <link href="https://toyourheart163.github.io/2020/06/18/golang-learing/"/>
    <id>https://toyourheart163.github.io/2020/06/18/golang-learing/</id>
    <published>2020-06-18T07:13:01.000Z</published>
    <updated>2021-03-12T10:36:26.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go-help"><a href="#go-help" class="headerlink" title="go help"></a>go help</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">help</span> gopath</span><br><span class="line">go env | grep GOPROXY</span><br></pre></td></tr></tbody></table></figure><h3 id="golang-配置-enviroment-config"><a href="#golang-配置-enviroment-config" class="headerlink" title="golang 配置 enviroment config"></a>golang 配置 enviroment config</h3><h4 id="go-env-查看配置"><a href="#go-env-查看配置" class="headerlink" title="go env 查看配置"></a>go env 查看配置</h4><ul><li>GOPATH 用来查找依赖的包，下载的或者自己的</li><li>GOROOT go 系统安装的东西的位置</li><li>GOBIN 命令行位置 与 PATH 配合 </li><li>GOPROXY 镜像</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOBIN=<span class="variable">$PATH</span>:<span class="variable">$PWD</span>/bin  <span class="comment"># 设置</span></span><br><span class="line">go env -u GOBIN  <span class="comment"># -u unset 删除此配置</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.zshrc  or ~/.bashrc or ~/.profile</span></span><br><span class="line"><span class="comment"># 将 GOPATH 设置为新的 window 目录</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$PWD</span></span><br><span class="line"><span class="comment"># 如果设置了 GOPATH=$PWD 当前目录就不能用 go.mod</span></span><br><span class="line"><span class="comment"># go.mod 是模块的意思，就像 python 中的 requirements.txt 包含了包管理需要的包</span></span><br><span class="line"><span class="comment"># go get {url} 时会下载 go.mod 中的包</span></span><br><span class="line"><span class="comment"># go mod vender  用 vender 替换 src 位置 因为以前没有官方包管理工具</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><figcaption><span>go.mod</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/mikele/hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br></pre></td></tr></tbody></table></figure><h3 id="从-github-下载模块"><a href="#从-github-下载模块" class="headerlink" title="从 github 下载模块"></a>从 github 下载模块</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get https://github.com/toyourheart163/ohmygost</span><br></pre></td></tr></tbody></table></figure><h3 id="编写自己的模块"><a href="#编写自己的模块" class="headerlink" title="编写自己的模块"></a>编写自己的模块</h3><blockquote><p>google golang module</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/github.com/toyourheart163/ohmygost</span><br><span class="line">mkdir music &amp;&amp; <span class="built_in">cd</span> music</span><br><span class="line">vi music.go</span><br></pre></td></tr></tbody></table></figure><h3 id="编写模块内容"><a href="#编写模块内容" class="headerlink" title="编写模块内容"></a>编写模块内容</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module music</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Songs</span><span class="params">()</span></span> {}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Albums</span><span class="params">()</span></span> {}</span><br></pre></td></tr></tbody></table></figure><h3 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">'github.com/toyourheart163/ohmygost'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">  music.Songs()</span><br><span class="line">  music.Albums()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;go-help&quot;&gt;&lt;a href=&quot;#go-help&quot; class=&quot;headerlink&quot; title=&quot;go help&quot;&gt;&lt;/a&gt;go help&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
    
      <category term="golang" scheme="https://toyourheart163.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>spider 爬虫与反爬</title>
    <link href="https://toyourheart163.github.io/2020/06/06/spider/"/>
    <id>https://toyourheart163.github.io/2020/06/06/spider/</id>
    <published>2020-06-06T15:07:07.000Z</published>
    <updated>2021-03-12T10:36:26.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="google-发家的工具"><a href="#google-发家的工具" class="headerlink" title="google 发家的工具"></a>google 发家的工具</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>获取信息方法、反爬方法</p></blockquote><ol><li>获取信息<ul><li>html、css、js、svg</li><li>json</li><li>图片</li><li>音频</li><li>视频</li><li>其他文档</li></ul></li><li>解析信息<ul><li>文本<ul><li>xpath</li><li>css</li><li>re</li><li>nltk 自然语言处理，机器学习</li></ul></li><li>图像<ul><li>PIL</li><li>opencv</li><li>OCR 光学识别</li><li>机器学习</li></ul></li><li>语音<ul><li>google 的语音识别  </li></ul></li><li>视频<ul><li>opencv</li><li>ffmpeg</li><li>机器学习</li></ul></li></ul></li><li>存储信息<ul><li>文件<ul><li>html</li><li>json</li><li>csv</li></ul></li><li>数据库，数据仓库<ul><li>关系数据库<ul><li>Mysql、Postgesql</li></ul></li><li>非关系数据库<ul><li>MongoDB</li></ul></li></ul></li></ul></li><li>展示信息<ul><li>前端展示<ul><li>可视化</li></ul></li></ul></li><li>工具箱<ul><li>Scrapy</li><li>Pyspider</li><li>浏览器插件</li><li>其他软件</li></ul></li></ol><h3 id="反爬方法"><a href="#反爬方法" class="headerlink" title="反爬方法"></a>反爬方法</h3><ul><li>robot.txt</li><li>nginx 过滤请求头 python </li><li>具体请求头过滤</li><li>ip 过滤<ul><li>geoip</li></ul></li><li>字体</li><li>行为验证码<ul><li>滑动</li><li>转动</li><li>点触</li><li>文字</li><li>诗词</li><li>计算结果</li><li>图像识别</li><li>九宫图</li></ul></li><li>风险防控</li><li>设备绑定</li><li>短信，帐号绑定</li><li>带有效时间的，签名</li><li>加密证书</li><li>混淆</li><li>使用极验第三代</li><li>使用 google captcha</li><li>浏览器指纹</li><li>识别无头浏览器</li><li>使用 graphql 如 twitter 使用的那样</li><li>Ajax</li><li>假数据</li><li>频率限制</li><li>分页限制</li><li>法律警告</li><li>GFW</li></ul><h3 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h3><blockquote><p>可能需要法律咨询</p></blockquote><ul><li>忽略 robot.txt</li><li>频率限制</li><li>google cache or other cache</li><li>改 header 随机 user-agent<ul><li>尝试改为手机版</li><li>mitmproxy 修改 response header</li></ul></li><li>改 ip<ul><li>爬取代理网站的代理. 不稳定</li><li>4G 手机切换飞行模式</li><li>购买拨号 ip</li><li>tor 代理</li><li>scrapyhub 的代理 crawlera</li><li>heroku 代理 maintenance on/off 改 ip</li></ul></li><li>获取字体文件，一一对应</li><li>使用 Chrome 控制台</li><li>图像识别<ul><li>九宫图 =&gt; 像素对比</li><li>OCR</li><li>模拟人工轨迹</li><li>使用人工</li><li>机器识别，神经网络训练</li></ul></li><li>跟网站管理员申请访问权限</li></ul><h3 id="二进制转中文"><a href="#二进制转中文" class="headerlink" title="二进制转中文"></a>二进制转中文</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url=<span class="string">"https://google.com"</span>)</span><br><span class="line">response.content.decode(<span class="string">'utf-8'</span>)  <span class="comment"># 二进制转中文</span></span><br></pre></td></tr></tbody></table></figure><h3 id="urllib-使用"><a href="#urllib-使用" class="headerlink" title="urllib 使用"></a>urllib 使用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote, quote, urlencode</span><br><span class="line"></span><br><span class="line">quote(url)</span><br><span class="line">unquote(url)</span><br><span class="line">person = {<span class="string">'name'</span>: <span class="string">'li'</span>}</span><br><span class="line">urlencode(person)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;google-发家的工具&quot;&gt;&lt;a href=&quot;#google-发家的工具&quot; class=&quot;headerlink&quot; title=&quot;google 发家的工具&quot;&gt;&lt;/a&gt;google 发家的工具&lt;/h2&gt;&lt;h3 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="scrapy" scheme="https://toyourheart163.github.io/tags/scrapy/"/>
    
      <category term="requests" scheme="https://toyourheart163.github.io/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>已经会python学c语言基础</title>
    <link href="https://toyourheart163.github.io/2020/06/06/py2c/"/>
    <id>https://toyourheart163.github.io/2020/06/06/py2c/</id>
    <published>2020-06-06T02:41:07.000Z</published>
    <updated>2021-03-12T10:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如果会-python-了再去看-c-语言教程，那么可以略过很多地方"><a href="#如果会-python-了再去看-c-语言教程，那么可以略过很多地方" class="headerlink" title="如果会 python 了再去看 c 语言教程，那么可以略过很多地方"></a>如果会 python 了再去看 c 语言教程，那么可以略过很多地方</h2><h3 id="C-语言基础总结"><a href="#C-语言基础总结" class="headerlink" title="C 语言基础总结"></a>C 语言基础总结</h3><h3 id="最简单的-c-程序-没有输出-用一个称手的兵器（编辑器）配上语法检查的-输入"><a href="#最简单的-c-程序-没有输出-用一个称手的兵器（编辑器）配上语法检查的-输入" class="headerlink" title="最简单的 c 程序, 没有输出. 用一个称手的兵器（编辑器）配上语法检查的, 输入"></a>最简单的 c 程序, 没有输出. 用一个称手的兵器（编辑器）配上语法检查的, 输入</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="需要输出的"><a href="#需要输出的" class="headerlink" title="需要输出的"></a>需要输出的</h3><figure class="highlight c"><figcaption><span>main.c</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  // 增加输入输出包</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"OK"</span>);  <span class="comment">// 语句后面加 `;`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编译与执行"><a href="#编译与执行" class="headerlink" title="编译与执行"></a>编译与执行</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c  <span class="comment"># 或者 cc main.c  # 编译 </span></span><br><span class="line">./a.out  <span class="comment"># 执行, 需要有权限的话就 `chmod a+x a.out` 增加执行权</span></span><br><span class="line">gcc main.c &amp;&amp; ./a.out  <span class="comment"># 编译执行一起来</span></span><br><span class="line">gcc -o hello main.c hello.c  <span class="comment"># 多文件编译</span></span><br><span class="line"><span class="comment"># 如果想修改完后自动执行怎么办？我做了个命令行工具，如果你用 python，安装</span></span><br><span class="line">pip install seeing</span><br><span class="line"><span class="comment"># 自动执行</span></span><br><span class="line">seeing -f main.c</span><br></pre></td></tr></tbody></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行注释 */</span></span><br><span class="line"><span class="comment">// 单行注释， 跟 javascript 一样</span></span><br></pre></td></tr></tbody></table></figure><h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char nothin[20] <span class="meta-string">"to your heart"</span>  <span class="comment">// 全局变量，宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a;  <span class="comment">// 先定义类型</span></span><br><span class="line">    a = <span class="number">666</span>;  <span class="comment">// 后赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a);  <span class="comment">// 格式化打印</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> b = <span class="number">537.767</span>;  <span class="comment">// 定义为浮点型，同时赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">20</span>] = <span class="string">"akfjdsl;a"</span>;  <span class="comment">// 记得字符要用双引号</span></span><br><span class="line">    <span class="built_in">puts</span>(c);  <span class="comment">// puts 可以自动换行，但是不能格式化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针，是指在内存中的地址变量</span></span><br><span class="line">    <span class="keyword">int</span> *p;  <span class="comment">// 定义指针变量名</span></span><br><span class="line">    <span class="keyword">int</span> in[<span class="number">2</span>] = {<span class="number">3</span>, <span class="number">9</span>};</span><br><span class="line">    p = in;  <span class="comment">// 指向in</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p %p %p\n"</span>, p, &amp;in, &amp;in[<span class="number">0</span>]);  <span class="comment">// 指针地址是数组头的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *cc;</span><br><span class="line">    <span class="keyword">char</span> ccc[<span class="number">5</span>] = <span class="string">"bingo"</span>;</span><br><span class="line">    cc = ccc;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p %p\n"</span>, cc, &amp;(ccc[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">list</span>[SIZE] = {<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>};</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;SIZE; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="built_in">list</span>[i]);</span><br><span class="line">    }</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;SIZE) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="built_in">list</span>[i]);</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="struct-union"><a href="#struct-union" class="headerlink" title="struct union"></a>struct union</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> {</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> age</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">p1</span>;</span></span><br><span class="line">    p1.name = <span class="string">"lisa"</span>;</span><br><span class="line">    p1.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">u_tag</span> {</span></span><br><span class="line">      <span class="keyword">int</span> ival;</span><br><span class="line">      <span class="keyword">float</span> fval;</span><br><span class="line">      <span class="keyword">char</span> *sval;</span><br><span class="line">    } u;</span><br></pre></td></tr></tbody></table></figure><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要申请超大内存空间</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];  <span class="comment">// </span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">FILE *me;</span></span><br><span class="line"><span class="comment">me = fopen("file.txt", "r");</span></span><br><span class="line"><span class="comment">fgetc</span></span><br><span class="line"><span class="comment">fputc</span></span><br><span class="line"><span class="comment">fgets</span></span><br><span class="line"><span class="comment">fputs</span></span><br><span class="line"><span class="comment">fread</span></span><br><span class="line"><span class="comment">fwrite  // 二进制时用？</span></span><br><span class="line"><span class="comment">fclose(me);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FILE *me;</span><br><span class="line"><span class="keyword">char</span> *filename = <span class="string">"file.txt"</span>;</span><br><span class="line">me = fopen(filename, <span class="string">"w"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(me, <span class="string">"ABCJFDKSIE"</span>);</span><br><span class="line">fputc(<span class="string">'\n'</span>, me);</span><br><span class="line">fclose(me);</span><br><span class="line">me = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">char</span> res = EOF;</span><br><span class="line"><span class="keyword">while</span> ((res = fgetc(me)) != EOF) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, res);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">rewind(me);  <span class="comment">// 指针移到文件最前面</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1024</span>];</span><br><span class="line">fgets(str, <span class="number">9</span>, me);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, str);</span><br><span class="line">fclose(me);</span><br></pre></td></tr></tbody></table></figure><h3 id="系统自带库的使用"><a href="#系统自带库的使用" class="headerlink" title="系统自带库的使用"></a>系统自带库的使用</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  // 字符串相关</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;  // 判断单个字符类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">strlen</span></span><br><span class="line"><span class="comment">isascii</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><blockquote><p>看了3本基础书都没有</p></blockquote><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><ol><li>Ben Klemens：21st Century C——C Tips from the New School@2012 </li></ol><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如果会-python-了再去看-c-语言教程，那么可以略过很多地方&quot;&gt;&lt;a href=&quot;#如果会-python-了再去看-c-语言教程，那么可以略过很多地方&quot; class=&quot;headerlink&quot; title=&quot;如果会 python 了再去看 c 语言教程，那么可
      
    
    </summary>
    
    
    
      <category term="clang" scheme="https://toyourheart163.github.io/tags/clang/"/>
    
  </entry>
  
  <entry>
    <title>pip install error</title>
    <link href="https://toyourheart163.github.io/2020/05/30/pip-install-error/"/>
    <id>https://toyourheart163.github.io/2020/05/30/pip-install-error/</id>
    <published>2020-05-30T01:45:33.000Z</published>
    <updated>2021-03-12T10:36:26.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pip-install-debug"><a href="#pip-install-debug" class="headerlink" title="pip install debug"></a>pip install debug</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜   py setup.py sdist &amp;&amp; py setup.py install</span><br><span class="line">usage: setup.py [-h] [-f FILENAME] [-s seconds] [-c cmd]</span><br><span class="line">setup.py: error: unrecognized arguments: sdist</span><br><span class="line">➜   py setup.py install</span><br><span class="line">usage: setup.py [-h] [-f FILENAME] [-s seconds] [-c cmd]</span><br><span class="line">setup.py: error: unrecognized arguments: install</span><br></pre></td></tr></tbody></table></figure><blockquote><p>原因是文件 <strong>init</strong>.py 中的 argparse 的命令拦截了setup.py</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 parser.add_argument 放在函数中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser.add_argument(<span class="string">'-f'</span>, <span class="string">'--filename'</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pip-install-debug&quot;&gt;&lt;a href=&quot;#pip-install-debug&quot; class=&quot;headerlink&quot; title=&quot;pip install debug&quot;&gt;&lt;/a&gt;pip install debug&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
    
      <category term="debug" scheme="https://toyourheart163.github.io/tags/debug/"/>
    
      <category term="pip" scheme="https://toyourheart163.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>drf debug</title>
    <link href="https://toyourheart163.github.io/2020/04/24/drf-debug/"/>
    <id>https://toyourheart163.github.io/2020/04/24/drf-debug/</id>
    <published>2020-04-24T19:18:20.000Z</published>
    <updated>2021-03-12T10:36:26.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="get-a-bug"><a href="#get-a-bug" class="headerlink" title="get a bug"></a>get a bug</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,),</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">bug</span><br><span class="line">---</span><br><span class="line">    self._paginator = self.pagination_class()</span><br><span class="line">TypeError: <span class="string">'list'</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br><span class="line">[<span class="number">25</span>/Apr/<span class="number">2020</span> 03:<span class="number">21</span>:<span class="number">51</span>] <span class="string">"GET /api/v1/projects/ HTTP/1.1"</span> <span class="number">500</span> <span class="number">16449</span></span><br></pre></td></tr></tbody></table></figure><h2 id="fix-bug"><a href="#fix-bug" class="headerlink" title="fix bug"></a>fix bug</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,),</span><br><span class="line">^^^</span><br></pre></td></tr></tbody></table></figure><h2 id="Why-i-get-this-bug"><a href="#Why-i-get-this-bug" class="headerlink" title="Why i get this bug"></a>Why i get this bug</h2><blockquote><p>I use pylint to check the codes, settings module is too long in a line more than 79 bit. so i cut down.</p></blockquote><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;get-a-bug&quot;&gt;&lt;a href=&quot;#get-a-bug&quot; class=&quot;headerlink&quot; title=&quot;get a bug&quot;&gt;&lt;/a&gt;get a bug&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbod
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://toyourheart163.github.io/tags/django/"/>
    
      <category term="drf" scheme="https://toyourheart163.github.io/tags/drf/"/>
    
      <category term="debug" scheme="https://toyourheart163.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>git-flow-step-by-step</title>
    <link href="https://toyourheart163.github.io/2020/04/10/git-flow-step-by-step/"/>
    <id>https://toyourheart163.github.io/2020/04/10/git-flow-step-by-step/</id>
    <published>2020-04-10T13:22:14.000Z</published>
    <updated>2021-03-12T10:36:26.160Z</updated>
    
    <content type="html"><![CDATA[<p>people A</p><ol><li><p>push new repo to github</p></li><li><p>go to <code>https://github.com/{username}/{repo}/settings/access</code> </p><p>example <a href="https://github.com/toyourheart163/seeing/settings/access">toyourheart163/seeing</a></p></li><li><p>invite a collaborator</p></li><li><p>fill a username and select</p></li></ol><p>people B</p><ol><li>check email.</li><li>access.</li><li>git clone <code>{url}</code></li></ol><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;people A&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;push new repo to github&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;go to &lt;code&gt;https://github.com/{username}/{repo}/settings/access&lt;/code&gt;
      
    
    </summary>
    
    
    
      <category term="git-flow" scheme="https://toyourheart163.github.io/tags/git-flow/"/>
    
  </entry>
  
  <entry>
    <title>kownledge-manager</title>
    <link href="https://toyourheart163.github.io/2020/04/01/kwonledge-manager/"/>
    <id>https://toyourheart163.github.io/2020/04/01/kwonledge-manager/</id>
    <published>2020-04-01T07:11:48.000Z</published>
    <updated>2021-03-12T10:36:26.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://program-think.blogspot.com/2013/09/knowledge-structure.html">如何完善自己的知识结构</a></p></blockquote><h1 id="什么是“知识点”？"><a href="#什么是“知识点”？" class="headerlink" title="什么是“知识点”？"></a>什么是“知识点”？</h1><p>　　所谓的“知识点”，通常表示某个【有价值】的信息。</p><h2 id="知识点的类型"><a href="#知识点的类型" class="headerlink" title="知识点的类型"></a>知识点的类型</h2><p>知识点有很多种类型，常见的有如下几种：<br>【概念性】的知识点——用来表示某种“定义”<br>【指导性】的知识点——用来表示某种“方法”<br>【陈述性】的知识点——用来表示某种“事实”</p><h2 id="如何应对“知识爆炸”？"><a href="#如何应对“知识爆炸”？" class="headerlink" title="如何应对“知识爆炸”？"></a>如何应对“知识爆炸”？</h2><p>　　这个词汇很多人都听说过。如今是信息时代，每个学科的知识总量都以非常快的速度膨胀。这对人的脑力是巨大的挑战。即便是在你主攻的一个非常细的细分领域，你也不可能记住所有的知识点。咋办捏？<br>　　刚才列举了三类常见的知识点：描述概念、描述方法、描述事实。头两类的比例很低，但通常都很重要。所以这两类你需要记忆。第三类的比例很大（很可能占总量的 99% 以上），这时候你需要做一些取舍——只记住核心的知识点，舍弃边缘的知识点。<br>　　肯定有同学会问：如何区分哪些是核心的，哪些是边缘的？这又是一个很大的话题，以后抽空单独写一篇介绍。<br>　　还有的同学会问：不记住边缘的知识点，万一今后要用，咋办？<br>　　其实很简单。如今的搜索引擎技术很发达，维基百科也很成熟，还有很多专业的文献检索工具。只要你善于利用计算机和互联网，等到【需要的时候】再临时去查，不难搞定。关于这方面的技巧，可以参考之前的系列博文《如何挖掘网络资源》。</p><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://program-think.blogspot.com/2013/09/knowledge-structure.html&quot;&gt;如何完善自己的知识结构&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是“
      
    
    </summary>
    
    
    
      <category term="IT" scheme="https://toyourheart163.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>resource-discovery</title>
    <link href="https://toyourheart163.github.io/2020/03/31/resource-discovery/"/>
    <id>https://toyourheart163.github.io/2020/03/31/resource-discovery/</id>
    <published>2020-03-31T06:44:16.000Z</published>
    <updated>2021-03-12T10:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络资源表格"><a href="#网络资源表格" class="headerlink" title="网络资源表格"></a>网络资源表格</h1><h2 id="网站内容的指标"><a href="#网站内容的指标" class="headerlink" title="网站内容的指标"></a>网站内容的指标</h2><p>【对你的价值】到底有多大，还可以评估你挖掘其中的内容需要耗费多少时间和精力。</p><h3 id="内容的信噪比"><a href="#内容的信噪比" class="headerlink" title="内容的信噪比"></a>内容的信噪比</h3><p>　　任何一个网站的内容，都会有一些信息是无用的，咱们称之为“噪声”。所谓的【信噪比】，就是是“有用信息”与“垃圾噪声”的比率。显然，信噪比越大越好。<br>　　提醒一下：信噪比的评价是主观的。因为每个人的关注点（价值取向）不同，所以同样的内容，对不同的人，会有不同的信噪比。</p><h3 id="内容的可搜索性"><a href="#内容的可搜索性" class="headerlink" title="内容的可搜索性"></a>内容的可搜索性</h3><p>　　主要指网站的内容是否容易被搜索引擎检索和收录。<br>　　这个指标是客观的。</p><h3 id="内容的生命周期"><a href="#内容的生命周期" class="headerlink" title="内容的生命周期"></a>内容的生命周期</h3><p>　　主要指网站内容的生命周期的长短。关于信息的生命周期，稍微解释一下：对于某个信息而言，只有在它的生命周期之内，该信息才有价值；过了生命周期，就没有价值。<br>　　举例：<br>　　比如美国大选之前，某人制作了一个分析报告，分析竞选双方的得票率。那么，当大选结果揭晓之后，这个报告的生命周期就结束了。<br>　　这个指标是半主观半客观的。<br>　　关注那些生命周期较长的内容。因为在网上冲浪是需要消耗时间和精力的。如果你关注的都是生命周期很短的信息，从“投资回报率”的角度来看，是不合算滴！</p><h3 id="内容的组织性"><a href="#内容的组织性" class="headerlink" title="内容的组织性"></a>内容的组织性</h3><p>　　指的是网站的不同内容之间，是否具有较好的分类，是否具有较好的层次，是否具有较好的关联。<br>　　这个指标是客观的。<br>　　组织性越好，你就越容易找到该网站的其它感兴趣的内容。</p><h2 id="媒介"><a href="#媒介" class="headerlink" title="媒介"></a>媒介</h2><p>视频 &lt; 图片 &lt; 文字</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>分类</th><th align="left">搜索性</th><th align="left">组织性</th><th align="left">生命周期</th><th align="left">信噪比</th><th align="left">使用建议</th></tr></thead><tbody><tr><td>★Web 1.0</td><td align="left">搜索引擎友好</td><td align="left">比较好</td><td align="left">专业的长，新闻短</td><td align="left">新闻类差，专业类，看情况</td><td align="left">好的可收藏或RSS订阅</td></tr><tr><td>BBS</td><td align="left">大部分可搜索</td><td align="left">中上</td><td align="left">哲学长，八卦短</td><td align="left">精华区好点</td><td align="left">质量好原创的发帐号人可浏览</td></tr><tr><td>Blog</td><td align="left">友好</td><td align="left">组织好</td><td align="left">看情况</td><td align="left">好于论坛、SNS、微博</td><td align="left">好的就订阅吧</td></tr><tr><td>weibo</td><td align="left">文字的可搜索</td><td align="left">时间轴，碎片化</td><td align="left">短</td><td align="left">信噪比差</td><td align="left">少用</td></tr><tr><td>SNS</td><td align="left">大部分不可搜索</td><td align="left">碎片，中下</td><td align="left">比微博长</td><td align="left">信噪不如博客，好于微博</td><td align="left">除非联系客户，少用</td></tr><tr><td>百科</td><td align="left">友好</td><td align="left">好</td><td align="left">长</td><td align="left">信噪比好</td><td align="left">搜索英文版的</td></tr><tr><td>文件分享</td><td align="left">标题可搜索</td><td align="left">中等</td><td align="left">较长</td><td align="left">有好有差</td><td align="left">用来找电子书</td></tr><tr><td>问答类</td><td align="left">友好</td><td align="left">长</td><td align="left">较好</td><td align="left">比论坛好</td><td align="left">没帮助的，直接关掉；有帮助，看完关掉</td></tr></tbody></table><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络资源表格&quot;&gt;&lt;a href=&quot;#网络资源表格&quot; class=&quot;headerlink&quot; title=&quot;网络资源表格&quot;&gt;&lt;/a&gt;网络资源表格&lt;/h1&gt;&lt;h2 id=&quot;网站内容的指标&quot;&gt;&lt;a href=&quot;#网站内容的指标&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="IT" scheme="https://toyourheart163.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>Make docker image smeller than 30X</title>
    <link href="https://toyourheart163.github.io/2020/03/04/docker-slim-Use/"/>
    <id>https://toyourheart163.github.io/2020/03/04/docker-slim-Use/</id>
    <published>2020-03-04T12:41:03.000Z</published>
    <updated>2021-03-12T10:36:26.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Docker image is very big. Use docker-slim make is 30X smeller.</p></blockquote><h2 id="install-docker-slim"><a href="#install-docker-slim" class="headerlink" title="install docker-slim"></a>install docker-slim</h2><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><p><a href="https://github.com/docker-slim/docker-slim">docker-slim</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unzip dist_mac.zip</span><br><span class="line">chmod +rx dist_mac/docker-slim*</span><br><span class="line">mv dist_mac/docker-slim /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">mkdir /tmp/docker-slim-state</span><br><span class="line">cp dist_mac/docker-slim-sensor /tmp/docker-slim-state/</span><br></pre></td></tr></tbody></table></figure><h2 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull python</span><br><span class="line">docker-slim build --http-probe=<span class="literal">false</span> python</span><br></pre></td></tr></tbody></table></figure><blockquote><p>(Before: 689MB =&gt; After: 17MB) It’s smeller 40X.</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images | grep -n <span class="string">"python"</span></span><br><span class="line">3:python.slim                latest              9d74b2d5f44f        6 hours ago         17MB</span><br><span class="line">9:python                     3.6                 07d72c0beb99        23 months ago       689MB</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Docker image is very big. Use docker-slim make is 30X smeller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;install-docker-slim&quot;&gt;&lt;a href=&quot;#inst
      
    
    </summary>
    
    
    
      <category term="docker" scheme="https://toyourheart163.github.io/tags/docker/"/>
    
      <category term="Ops" scheme="https://toyourheart163.github.io/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>share python app to pypi</title>
    <link href="https://toyourheart163.github.io/2020/02/22/share-python-app-to-pypi/"/>
    <id>https://toyourheart163.github.io/2020/02/22/share-python-app-to-pypi/</id>
    <published>2020-02-22T05:20:13.000Z</published>
    <updated>2021-03-12T10:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分发安装包到pypi"><a href="#分发安装包到pypi" class="headerlink" title="分发安装包到pypi"></a>分发安装包到pypi</h1><ol><li><p>注册<a href="https://pypi.org/account/register">Pypi</a>  <a href="https://pypi.org/account/register">https://pypi.org/account/register</a></p></li><li><p>验证邮箱</p></li><li><p><a href="https://pypi.org/manage/account/token/">生成token</a></p></li><li><p>复制token到~/.pypirc文件大概像下面那样</p><p> [pypi]<br>   username = <code>__token__</code><br>   password = <code>your_token</code></p></li><li><p><code>pip search $thiscn</code> 看看有没有和你的python包同名</p></li></ol><h2 id="安装包的文件"><a href="#安装包的文件" class="headerlink" title="安装包的文件"></a>安装包的文件</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── .gitignore</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── setup.py</span><br><span class="line">├── thiscn</span><br><span class="line">│&nbsp;&nbsp; └── __init__.py</span><br></pre></td></tr></tbody></table></figure><h3 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"README.md"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">"thiscn"</span>, <span class="comment"># Replace with your own username</span></span><br><span class="line">    version=<span class="string">"0.0.2"</span>,</span><br><span class="line">    author=<span class="string">"Mikele"</span>,</span><br><span class="line">    author_email=<span class="string">"blive200@gmail.com"</span>,</span><br><span class="line">    description=<span class="string">"The zen of Python, English and Chinese."</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">"text/markdown"</span>,</span><br><span class="line">    url=<span class="string">"https://github.com/toyourheart163/thiscn"</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">        <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">        <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.6'</span>,</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>setup.py需要修改的内容有: name, version, author, email, description, url</p></blockquote><h3 id="LICENSE和-gitignore可以在github生成项目时生成"><a href="#LICENSE和-gitignore可以在github生成项目时生成" class="headerlink" title="LICENSE和.gitignore可以在github生成项目时生成"></a>LICENSE和.gitignore可以在github生成项目时生成</h3><p>.gitignore 选择 python<br>LICENSE 可以选择MIT</p><h3 id="thiscn-init-py"><a href="#thiscn-init-py" class="headerlink" title="thiscn/__init__.py"></a><code>thiscn/__init__.py</code></h3><p>简单的项目可以直接在<code>__init__.py</code>写源代码</p><h2 id="安装twine"><a href="#安装twine" class="headerlink" title="安装twine"></a>安装twine</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></tbody></table></figure><h2 id="生成package压缩包"><a href="#生成package压缩包" class="headerlink" title="生成package压缩包"></a>生成package压缩包</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist</span><br></pre></td></tr></tbody></table></figure><h2 id="分享到Pypi"><a href="#分享到Pypi" class="headerlink" title="分享到Pypi"></a>分享到Pypi</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分发安装包到pypi&quot;&gt;&lt;a href=&quot;#分发安装包到pypi&quot; class=&quot;headerlink&quot; title=&quot;分发安装包到pypi&quot;&gt;&lt;/a&gt;分发安装包到pypi&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册&lt;a href=&quot;https://pypi.org/a
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://toyourheart163.github.io/tags/python/"/>
    
      <category term="pypi" scheme="https://toyourheart163.github.io/tags/pypi/"/>
    
      <category term="package" scheme="https://toyourheart163.github.io/tags/package/"/>
    
  </entry>
  
  <entry>
    <title>shell-scripts</title>
    <link href="https://toyourheart163.github.io/2020/02/18/shell-scripts/"/>
    <id>https://toyourheart163.github.io/2020/02/18/shell-scripts/</id>
    <published>2020-02-18T11:13:54.000Z</published>
    <updated>2021-03-12T10:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="鸟哥的linux私房菜，学习"><a href="#鸟哥的linux私房菜，学习" class="headerlink" title="鸟哥的linux私房菜，学习"></a>鸟哥的linux私房菜，学习</h2><h2 id="shell-script-learning"><a href="#shell-script-learning" class="headerlink" title="shell script learning"></a>shell script learning</h2><blockquote><p>Tips: shell 不要用于大数据计算，效率低</p></blockquote><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值运算:简单的加减乘除</span></span><br><span class="line">total=$((<span class="number">3</span>*<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line"><span class="comment"># 2个 = 号时，用`bash script.sh`（因为`sh script.sh`无法识别）</span></span><br><span class="line"><span class="comment"># `sh script.sh`只能用一个 = 号 </span></span><br><span class="line">[ <span class="string">"<span class="variable">$HOME</span>"</span> == <span class="string">"<span class="variable">$MAIL</span>"</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释要另写一行，不要写在表达式后面</span></span><br></pre></td></tr></tbody></table></figure><h3 id="if-结束语反过来fi"><a href="#if-结束语反过来fi" class="headerlink" title="if 结束语反过来fi"></a>if 结束语反过来fi</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"input Y/N: "</span> yn</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$yn</span>"</span> == <span class="string">"y"</span> -o <span class="string">"<span class="variable">$yn</span>"</span> == <span class="string">"Y"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"yes"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$yn</span>"</span> == <span class="string">"n"</span> -o <span class="string">"<span class="variable">$yn</span>"</span> == <span class="string">"N"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"no"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"else"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><h3 id="case-结束语倒装esac"><a href="#case-结束语倒装esac" class="headerlink" title="case 结束语倒装esac"></a>case 结束语倒装esac</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"hello"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">""</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"nothing"</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"else"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></tbody></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=0</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$i</span>"</span> != <span class="string">"100"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line">s=$((<span class="variable">$s</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"sum 1...100 is ===&gt; <span class="variable">$s</span>"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">until [ <span class="string">"<span class="variable">$yn</span>"</span> == <span class="string">"yes"</span> -o <span class="string">"<span class="variable">$yn</span>"</span> == <span class="string">"YES"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input yes/YES to stop this program: "</span> yn</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"OK! you input the correct answer."</span></span><br></pre></td></tr></tbody></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> dog cat elephant</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$animal</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure><h4 id="for-two"><a href="#for-two" class="headerlink" title="for two"></a>for two</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input a number, I will count for 1+2+...+your_input: "</span> nu</span><br><span class="line">s=0</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=<span class="variable">$nu</span>; i=i+1 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">s=$((<span class="variable">$s</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The result of '1+2+3+...+<span class="variable">$nu</span>' is ==&gt; <span class="variable">$s</span>"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="shell-script-的追踪-debug"><a href="#shell-script-的追踪-debug" class="headerlink" title="shell script 的追踪 debug"></a>shell script 的追踪 debug</h3><p><code>sh [-nvx] scripts.sh</code></p><p>选项不参数:<br>-n :丌要执行 script，仅查询语法的问题;<br>-v :再执行 sccript 前，先将 scripts 的内容输出刡屏幕上;<br>-x :将使用刡的 script 内容显示刡屏幕上，这是很有用的参数!</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">printit</span></span>() {</span><br><span class="line"><span class="comment"># 加上 -n 可以丌断行继续在同一行显示</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Your choice is "</span></span><br><span class="line">}</span><br><span class="line">printit; <span class="built_in">echo</span> <span class="string">"yes"</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;鸟哥的linux私房菜，学习&quot;&gt;&lt;a href=&quot;#鸟哥的linux私房菜，学习&quot; class=&quot;headerlink&quot; title=&quot;鸟哥的linux私房菜，学习&quot;&gt;&lt;/a&gt;鸟哥的linux私房菜，学习&lt;/h2&gt;&lt;h2 id=&quot;shell-script-lear
      
    
    </summary>
    
    
    
      <category term="shell" scheme="https://toyourheart163.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>网络安全</title>
    <link href="https://toyourheart163.github.io/2020/01/13/network-security/"/>
    <id>https://toyourheart163.github.io/2020/01/13/network-security/</id>
    <published>2020-01-13T13:25:22.000Z</published>
    <updated>2021-03-12T10:36:26.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-IP协议与DNS域名系统"><a href="#HTTP-IP协议与DNS域名系统" class="headerlink" title="HTTP/IP协议与DNS域名系统"></a>HTTP/IP协议与DNS域名系统</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>比如我的博客是<code>http://toyourheart163.github.io</code><br>这个<code>http://</code>就是一个网络协议，传输html、js、图片、各种文件</p><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h2><p>SSL是“Secure Sockets Layer”的缩写，中文叫做“安全套接层”。<br>TLS是SSL标准化后改名的。（是“Transport Layer Security”的缩写），中文叫做“传输层安全协议”。</p><h2 id="HTTP与TCP"><a href="#HTTP与TCP" class="headerlink" title="HTTP与TCP"></a>HTTP与TCP</h2><p>在网络7层分层模型中，TCP 被称为“传输层协议”，而 HTTP 被称为“应用层协议”。有很多常见的应用层协议是以 TCP 为基础的，比如“FTP、SMTP、POP、IMAP”等。</p><p>传输层主要有两个协议，分别是 TCP 和 UDP。TCP 比 UDP 更可靠。你可以把 TCP 协议想象成某个水管，发送端这头进水，接收端那头就出水。并且 TCP 协议能够确保，先发送的数据先到达（与之相反，UDP 不保证这点）。</p><p>HTTP 对 TCP 连接的使用，分为两种方式：俗称“短连接”和“长连接”。以前要传输的数据少，用短连接就可以了。现在连接一个网页要传输高清图片、js几十个、css几个，所以只能用长连接(keep-alive)减少CPU开销。比如某个银行app一打开，一下子去掉了我20M的流量。还有高德地图。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>https 就是http与ssl组合，也就是加密了。手机抓包工具没有用了。只能在虚拟机上探测。除非手机root过了。</p><p>HTTPS协议具有的特性，我关注的3点是：</p><ol><li>保密性（防泄密），防止被别人知道你看的内容。</li><li>完整性（防篡改），防止电信加广告。</li><li>真实性（防假冒），防止中间人攻击，比如百度把你访问<code>www.google.com</code>替换成百度首页的内容如果是涉及金融或者安全就麻烦了。修改ip要修改DNS.</li></ol><h2 id="手机app爬虫-ca证书"><a href="#手机app爬虫-ca证书" class="headerlink" title="手机app爬虫, ca证书"></a>手机app爬虫, ca证书</h2><p>中间人攻击可以在安卓虚拟机root后，传输mitmproxy证书，弄成根证书。然后在pc打开mitmproxy这个软件，在这过程中发现了微信老是传输一些东西到包含analysis的网址中。下次用个小号看看它在搞什么鬼！<br>也可以用Charles图形界面的抓包工具。mitmproxy的好处是配合python自动化。</p><h2 id="服务器加密"><a href="#服务器加密" class="headerlink" title="服务器加密"></a>服务器加密</h2><p>购买ca证书, 然后nginx配置443端口与ssl，配置证书路径。</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>根据域名查ip地址</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 4 toyourheart163.github.io</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>域名</th><th>ip地址</th></tr></thead><tbody><tr><td>toyourheart163.github.io</td><td>185.199.111.153</td></tr></tbody></table><p>hosts文件如果有域名与ip的对应关系就直达ip地址。假设设置错误，就会到达别的网站。<br>没有就从DNS域名服务查询。</p><p>可以修改hosts文件直达ip地址，一般来说电脑的DNS设置是路由器的地址如：<code>192.168.1.1</code>，如果没有用路由器，看到的是电信的DNS，为了防止电信修改，可以修改为公共的。如<code>8.8.8.8</code></p><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-IP协议与DNS域名系统&quot;&gt;&lt;a href=&quot;#HTTP-IP协议与DNS域名系统&quot; class=&quot;headerlink&quot; title=&quot;HTTP/IP协议与DNS域名系统&quot;&gt;&lt;/a&gt;HTTP/IP协议与DNS域名系统&lt;/h1&gt;&lt;h2 id=&quot;HTTP&quot;
      
    
    </summary>
    
    
    
      <category term="IT" scheme="https://toyourheart163.github.io/tags/IT/"/>
    
      <category term="信息安全" scheme="https://toyourheart163.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>pandas数据处理</title>
    <link href="https://toyourheart163.github.io/2020/01/08/pandas/"/>
    <id>https://toyourheart163.github.io/2020/01/08/pandas/</id>
    <published>2020-01-08T13:17:39.000Z</published>
    <updated>2021-03-12T10:36:26.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一开始不认识pandas，采用的是openpyxl库"><a href="#一开始不认识pandas，采用的是openpyxl库" class="headerlink" title="一开始不认识pandas，采用的是openpyxl库"></a>一开始不认识pandas，采用的是openpyxl库</h2><ul><li>好处是可以合并单元格，设置颜色，还可以隐藏某些列表。</li></ul><blockquote><p>如何删除表格首尾几行？</p></blockquote><table><thead><tr><th>天下公司</th><th></th></tr></thead><tbody><tr><td>name</td><td>age</td></tr><tr><td>lisa</td><td>18</td></tr><tr><td>nacy</td><td>20</td></tr><tr><td>total</td><td>38</td></tr></tbody></table><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">删除表格首尾几行</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">'excel.xlsx'</span>)</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_remove_front_and_end_rows</span>(<span class="params">ws</span>):</span></span><br><span class="line">    <span class="comment"># 删除前1行注释</span></span><br><span class="line">    ws.delete_rows(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 删除最后一行的统计</span></span><br><span class="line">    ws.delete_rows(ws.max_row,ws.max_row)</span><br><span class="line">    data = ws.values</span><br><span class="line">    <span class="comment"># 第二行作为列表名</span></span><br><span class="line">    columns = <span class="built_in">next</span>(data)[<span class="number">0</span>:]</span><br><span class="line">    df = pd.DataFrame(data, columns=columns)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></tbody></table></figure><h2 id="总结一下pandas数据处理"><a href="#总结一下pandas数据处理" class="headerlink" title="总结一下pandas数据处理"></a>总结一下pandas数据处理</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取excel文件的名叫sheet2工作表</span></span><br><span class="line">filename = <span class="string">'file.xlsx'</span></span><br><span class="line">df = pd.read_excel(filename, sheet_name=<span class="string">'sheet2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取多个工作表，合并成1个表格。</span></span><br><span class="line"><span class="keyword">import</span> xlrd <span class="keyword">as</span> xl</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat_sheets</span>(<span class="params">filename</span>)</span></span><br><span class="line"><span class="function">    '''<span class="title">merge</span> <span class="title">many</span> <span class="title">sheets</span> <span class="title">to</span> <span class="title">one</span> <span class="title">DataFrame</span>'''</span></span><br><span class="line">    wb = xl.open_workbook(filename)</span><br><span class="line">    sheet_names = wb.sheet_names()  <span class="comment"># 获取多个工作表名。</span></span><br><span class="line">    xlsx = pd.ExcelFile(filename)</span><br><span class="line">    ts = pd.DataFrame()</span><br><span class="line">    <span class="keyword">for</span> sheet_name <span class="keyword">in</span> sheet_names:</span><br><span class="line">        df = pd.read_excel(xlsx, sheet_name=sheet_name)</span><br><span class="line">        ts = ts.append(df, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件编码为gb18030的csv</span></span><br><span class="line">ts = pd.read_csv(<span class="string">'file.csv'</span>, encoding=<span class="string">'gb18030'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改列名</span></span><br><span class="line">df = df.rename(columns={<span class="string">'仓库'</span>: <span class="string">'仓库名称'</span>})  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件修改列的类型</span></span><br><span class="line">df = pd.read_excel(filename, dtype={<span class="string">'外部编码'</span>: <span class="built_in">str</span>, <span class="string">'外部sku'</span>: <span class="string">'int32'</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并，以左边的表格为准</span></span><br><span class="line">res = pd.merge(ts, df, on=[<span class="string">'外部编码'</span>, <span class="string">'外部sku'</span>], how=<span class="string">'left'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是什么操作</span></span><br><span class="line">df.between_time(<span class="string">'20180908'</span>, <span class="string">'20180909'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择列、行</span></span><br><span class="line">df.loc[:, [<span class="string">'货品编码'</span>, <span class="string">'货品名称'</span>]]</span><br><span class="line">df = df[df[<span class="string">'货品编码'</span>]==<span class="number">6971525990012</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置索引</span></span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间处理</span></span><br><span class="line">pd.Timestamp(<span class="string">'2018-10-23 16:49:13.700945'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变一列的时间格式</span></span><br><span class="line">df[<span class="string">'时间'</span>] = df[<span class="string">'时间'</span>].apply(<span class="keyword">lambda</span> x: pd.Timestamp(x).strftime(<span class="string">'%Y-%m-%d'</span>))</span><br><span class="line">df[<span class="string">'时间'</span>] = df[<span class="string">'时间'</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 某个月的最后一天</span></span><br><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> monthrange</span><br><span class="line">month_last_day = monthrange(year=<span class="number">2018</span>, month=<span class="number">10</span>)[<span class="number">1</span>]  <span class="comment"># 31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计总和</span></span><br><span class="line">df.groupby([<span class="string">'仓库名称'</span>, <span class="string">'货品id'</span>, <span class="string">'货品名称'</span>]).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备注1列包含"村淘"2个字</span></span><br><span class="line">df[df[<span class="string">'备注'</span>].<span class="built_in">str</span>.contains(<span class="string">'村淘'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不包含，加了~</span></span><br><span class="line">df[~df[<span class="string">'备注'</span>].<span class="built_in">str</span>.contains(<span class="string">'村淘'</span>)]</span><br></pre></td></tr></tbody></table></figure><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以index为时间，计算每段时间内的数据，3M代表3个月，3个月之和</span></span><br><span class="line">df.resample(<span class="string">'3M'</span>).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负数变红，引起重视。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_negative_red</span>(<span class="params">val</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Takes a scalar and returns a string with</span></span><br><span class="line"><span class="string">    the css property `'color: red'` for negative</span></span><br><span class="line"><span class="string">    strings, black otherwise.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    color = <span class="string">'red'</span> <span class="keyword">if</span> val &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'Blue'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'color: %s'</span> % color</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">highlight_max</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    highlight the maximum in a Series yellow.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    is_max = s == s.<span class="built_in">max</span>()</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'background-color: yellow'</span> <span class="keyword">if</span> v <span class="keyword">else</span> <span class="string">''</span> <span class="keyword">for</span> v <span class="keyword">in</span> is_max]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链式操作，正数蓝色，负数红色，最大值黄色，一目了然。</span></span><br><span class="line">df.style.applymap(color_negative_red).apply(highlight_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出excel格式，并忽略索引列</span></span><br><span class="line">df.to_excel(<span class="string">"res.xlsx"</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存多个工作表到1个文件</span></span><br><span class="line">xls = pd.ExcelWriter(<span class="string">'file_write.xlsx'</span>)</span><br><span class="line">df1.to_excel(xls, sheet_name=<span class="string">'7月'</span>)</span><br><span class="line">df2.to_excel(xls, sheet_name=<span class="string">'8月'</span>)</span><br><span class="line">xls.save()</span><br></pre></td></tr></tbody></table></figure><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">计算店铺消费超过500元的客户</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient()</span><br><span class="line">db = client.goods</span><br><span class="line">tag = <span class="string">'selled_order_list'</span></span><br><span class="line">coll = db[tag]</span><br><span class="line"><span class="comment"># coll.find().count()</span></span><br><span class="line">collection = db.max_500</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_max_500_in_3_month</span>(<span class="params">shop</span>):</span></span><br><span class="line">    <span class="string">'''从销售数据表1统计某3个月消费超过500元的客户，保存的max_500数据表'''</span></span><br><span class="line">    <span class="comment"># 从数据库获取数据，并且倒序</span></span><br><span class="line">    results = coll.find({</span><br><span class="line">        <span class="string">'店铺名称'</span>: shop</span><br><span class="line">        }).sort(<span class="string">'订单创建时间'</span>, pymongo.DESCENDING)  <span class="comment"># .skip(100000).limit(100000)  # 降序</span></span><br><span class="line">    datas = <span class="built_in">list</span>(results)</span><br><span class="line">    df = pd.DataFrame(datas)</span><br><span class="line"></span><br><span class="line">    df[<span class="string">'买家实际支付金额'</span>] = df[<span class="string">'买家实际支付金额'</span>].astype(<span class="string">'float'</span>)</span><br><span class="line">    ts = df[[<span class="string">'买家会员名'</span>, <span class="string">'买家实际支付金额'</span>, <span class="string">'订单状态'</span>, <span class="string">'订单创建时间'</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不需要交易已关闭的</span></span><br><span class="line">    ts = ts[ts[<span class="string">'订单状态'</span>]!=<span class="string">'交易关闭'</span>]</span><br><span class="line">    ts = ts.drop(columns=[<span class="string">'订单状态'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把index设置为时间，方便统计某个时间段的数据</span></span><br><span class="line">    ts = ts.set_index(<span class="string">'订单创建时间'</span>)</span><br><span class="line">    <span class="comment"># ts.describe()</span></span><br><span class="line">    names = <span class="built_in">set</span>(ts[<span class="string">'买家会员名'</span>])</span><br><span class="line">    print(shop, <span class="string">'共有'</span>, <span class="built_in">len</span>(names), <span class="string">'用户'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_500</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="string">'''某3个月购买大于500元的客户'''</span></span><br><span class="line">        tf = ts[ts[<span class="string">'买家会员名'</span>]==name]</span><br><span class="line">        tf = tf.sort_values(<span class="string">'订单创建时间'</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">        s = tf.resample(<span class="string">'3M'</span>).<span class="built_in">sum</span>()</span><br><span class="line">        s_max = s.<span class="built_in">max</span>()[<span class="string">'买家实际支付金额'</span>]</span><br><span class="line">        tf_sum = tf.groupby(<span class="string">'买家会员名'</span>).<span class="built_in">sum</span>()[<span class="string">'买家实际支付金额'</span>][<span class="number">0</span>]</span><br><span class="line">        tf_mean = tf_sum / <span class="built_in">len</span>(tf.index)</span><br><span class="line">        <span class="keyword">if</span> s_max &gt;= <span class="number">500</span>:</span><br><span class="line">            now = pd.Timestamp.now()</span><br><span class="line">            user = {</span><br><span class="line">                <span class="string">'旺旺'</span>: name,</span><br><span class="line">                <span class="string">'3个月支付金额之和'</span>: s_max,</span><br><span class="line">                <span class="string">'购买时间段'</span>: s.index[-<span class="number">1</span>],</span><br><span class="line">                <span class="string">'开始购买时间'</span>: tf.index[-<span class="number">1</span>],</span><br><span class="line">                <span class="string">'开始购买金额'</span>: tf[<span class="string">'买家实际支付金额'</span>][-<span class="number">1</span>],</span><br><span class="line">                <span class="string">'最后购买时间'</span>: tf.index[<span class="number">0</span>],</span><br><span class="line">                <span class="string">'最后购买金额'</span>: tf[<span class="string">'买家实际支付金额'</span>][<span class="number">0</span>],</span><br><span class="line">                <span class="string">'平均下单金额'</span>: <span class="built_in">round</span>(tf_mean, <span class="number">2</span>),</span><br><span class="line">                <span class="string">'下单总数'</span>: <span class="built_in">len</span>(tf.index),</span><br><span class="line">                <span class="string">'下单总金额'</span>: tf.groupby(<span class="string">'买家会员名'</span>).<span class="built_in">sum</span>()[<span class="string">'买家实际支付金额'</span>][<span class="number">0</span>],</span><br><span class="line">                <span class="string">'店名'</span>: shop,</span><br><span class="line">                <span class="string">'更新时间'</span>: now</span><br><span class="line">            }</span><br><span class="line">            collection.insert_one(user)</span><br><span class="line">    </span><br><span class="line">    print(pd.Timestamp.now(), <span class="string">'开始插入数据库'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">list</span>(names)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">0</span>:</span><br><span class="line">            print(pd.Timestamp.now(), <span class="string">'解析到=&gt;第 '</span>, i+<span class="number">1</span>, <span class="string">' 个用户'</span>)</span><br><span class="line">            max_500(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max_500(name)</span><br><span class="line"></span><br><span class="line">    print(pd.Timestamp.now(), <span class="string">' insert end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    get_max_500_in_3_month(shop=<span class="string">'麦可乐的淘宝店'</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一开始不认识pandas，采用的是openpyxl库&quot;&gt;&lt;a href=&quot;#一开始不认识pandas，采用的是openpyxl库&quot; class=&quot;headerlink&quot; title=&quot;一开始不认识pandas，采用的是openpyxl库&quot;&gt;&lt;/a&gt;一开始不认识pa
      
    
    </summary>
    
    
    
      <category term="pandas" scheme="https://toyourheart163.github.io/tags/pandas/"/>
    
      <category term="data" scheme="https://toyourheart163.github.io/tags/data/"/>
    
      <category term="analysis" scheme="https://toyourheart163.github.io/tags/analysis/"/>
    
  </entry>
  
  <entry>
    <title>appium-spider 爬取手机app抖音等, 配置</title>
    <link href="https://toyourheart163.github.io/2020/01/07/appium-spider/"/>
    <id>https://toyourheart163.github.io/2020/01/07/appium-spider/</id>
    <published>2020-01-07T11:56:28.000Z</published>
    <updated>2021-03-12T10:36:26.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apps-scrapy-爬取记录"><a href="#apps-scrapy-爬取记录" class="headerlink" title="apps scrapy 爬取记录"></a>apps scrapy 爬取记录</h2><h3 id="安装appium-backup-your-app-data-because-it-will-clear-your-app-data"><a href="#安装appium-backup-your-app-data-because-it-will-clear-your-app-data" class="headerlink" title="安装appium, backup your app data, because it will clear your app data."></a>安装appium, <strong>backup your app data, because it will clear your app data.</strong></h3><blockquote><p>请备份你要测试的app的数据.</p></blockquote><blockquote><p>请备份你要测试的app的数据.</p></blockquote><blockquote><p>请备份你要测试的app的数据.</p></blockquote><p>重要的事多说几遍。如果你的手机不是测试机，最好先备份。比如我首先用来测试的酷安，数据就被清空了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在电脑上安装appium</span></span><br><span class="line"><span class="comment"># in pc</span></span><br><span class="line">$ npm install -g appium  <span class="comment"># 可能不支持旧版的安卓比如4.4的 </span></span><br></pre></td></tr></tbody></table></figure><h3 id="需要安装java和对应的sdk"><a href="#需要安装java和对应的sdk" class="headerlink" title="需要安装java和对应的sdk"></a>需要安装java和对应的sdk</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install java </span><br></pre></td></tr></tbody></table></figure><h4 id="下载安装Android-Studio"><a href="#下载安装Android-Studio" class="headerlink" title="下载安装Android Studio"></a>下载安装Android Studio</h4><p><a href="https://developer.android.com/studio">https://developer.android.com/studio</a><br>安装后下载sdk<a href="https://cuiqingcai.com/5407.html">安装方法</a><br>我的安卓版本是9.1需要下载Android Api 28的Android SDK Platform 28    </p><ul><li>配置ANDROID_HOME、JAVA_HOME变量</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.zshrc 仅供参考, 替换用户名heart为你的。</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/heart/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/sdk/tools:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/sdk/platform-tools:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home</span><br></pre></td></tr></tbody></table></figure><h3 id="使用，我的测试机器是mac电脑"><a href="#使用，我的测试机器是mac电脑" class="headerlink" title="使用，我的测试机器是mac电脑"></a>使用，我的测试机器是mac电脑</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在电脑上查看已连接usb的手机</span></span><br><span class="line"><span class="comment"># in pc</span></span><br><span class="line">$ adb devices -l  <span class="comment"># windows可能是adb devices</span></span><br><span class="line">SH12EPL03311           device usb:336592896X product:htc_bravo model:HTC_Desire device:bravo</span><br><span class="line">9FK0219304005159       device usb:337641472X product:ELE-AL00 model:ELE_AL00 device:HWELE</span><br></pre></td></tr></tbody></table></figure><p>可以看到有2台手机连接了电脑，记一下model的名字ELE_AL00, device的HWELE在adb shell会看到</p><blockquote><p>in android</p></blockquote><p>open your app which want to test.<br>打开你想要测试的app</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in pc</span></span><br><span class="line">$ adb shell</span><br><span class="line">HWELE:/ $ </span><br></pre></td></tr></tbody></table></figure><h3 id="手机上打开抖音，电脑输入下列命令"><a href="#手机上打开抖音，电脑输入下列命令" class="headerlink" title="手机上打开抖音，电脑输入下列命令"></a>手机上打开抖音，电脑输入下列命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pc输入dumpsys window windows | grep -E mCurrentFocus, window需要`mCurrentFocus`加引号</span></span><br><span class="line">HWELE:/ $ dumpsys window windows | grep -E mCurrentFocus</span><br><span class="line">  mCurrentFocus=Window{dc9f877 u0 com.ss.android.ugc.aweme/com.ss.android.ugc.aweme.main.MainActivity}</span><br></pre></td></tr></tbody></table></figure><h3 id="显示结果分析"><a href="#显示结果分析" class="headerlink" title="显示结果分析"></a>显示结果分析</h3><p>  <code>com.ss.android.ugc.aweme</code>就是后面要用到的appPackage<br><code>com.ss.android.ugc.aweme.main.MainActivity</code>的<code>.main.MainActivity</code>是后面要用到的appActivity</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"platformName"</span>: <span class="string">"Android"</span>,</span><br><span class="line">  <span class="attr">"deviceName"</span>: <span class="string">"ELE_AL00"</span>,</span><br><span class="line">  <span class="attr">"appPackage"</span>: <span class="string">"com.ss.android.ugc.aweme"</span>,</span><br><span class="line">  <span class="attr">"appActivity"</span>: <span class="string">".main.MainActivity"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面的json数据需要填入appium里面</p></blockquote><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>明显<code>appPackage</code> + <code>appActivity</code> = <code>com.ss.android.ugc.aweme.main.MainActivity</code></p><p>$ 配置完毕</p><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;apps-scrapy-爬取记录&quot;&gt;&lt;a href=&quot;#apps-scrapy-爬取记录&quot; class=&quot;headerlink&quot; title=&quot;apps scrapy 爬取记录&quot;&gt;&lt;/a&gt;apps scrapy 爬取记录&lt;/h2&gt;&lt;h3 id=&quot;安装appium-
      
    
    </summary>
    
    
    
      <category term="appium" scheme="https://toyourheart163.github.io/tags/appium/"/>
    
      <category term="python" scheme="https://toyourheart163.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django nginx uwsgi 配置</title>
    <link href="https://toyourheart163.github.io/2020/01/05/django-nginx-uwsgi/"/>
    <id>https://toyourheart163.github.io/2020/01/05/django-nginx-uwsgi/</id>
    <published>2020-01-05T06:35:14.000Z</published>
    <updated>2021-03-12T10:36:26.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器配置，一般来说官网最可靠。"><a href="#服务器配置，一般来说官网最可靠。" class="headerlink" title="服务器配置，一般来说官网最可靠。"></a>服务器配置，一般来说官网最可靠。</h1><blockquote><p>官网的一般是最新版的，你在别的地方找到的配置可能用不了。</p></blockquote><h2 id="记录nginx与uwsig配置"><a href="#记录nginx与uwsig配置" class="headerlink" title="记录nginx与uwsig配置"></a>记录nginx与uwsig配置</h2><ul><li>uwsgi 处理动态数据。<code>pip install uwsgi</code>安装。</li><li>nginx 作为反向代理服务器，更安全、处理static文件效率更高。</li></ul><h3 id="uwsgi-配置"><a href="#uwsgi-配置" class="headerlink" title="uwsgi 配置"></a>uwsgi 配置</h3><blockquote><p>主要是能执行wsgi.py文件即可，socket本地要与nginx对应即可</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line">base=/home/heart/Documents/server/vuedjango</span><br><span class="line">socket=127.0.0.1:8000</span><br><span class="line">chdir=%(base)</span><br><span class="line">wsgi-file=vuedjango/wsgi.py  # 主要 !important</span><br><span class="line">processes=4</span><br><span class="line">threads=2</span><br><span class="line">pythonhome=/usr/local/bin/python3</span><br><span class="line">logto=%(base)/logs/uwsgi.log</span><br></pre></td></tr></tbody></table></figure><p>启动<code>uwsgi uwsgi.ini</code>，<a href="http://127.0.0.1:8000">访问</a>，访问成功后可关闭<code>ctrl+c</code>。</p><h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><h4 id="局部配置-nginx-conf，绝对路径，监听80或443端口一起"><a href="#局部配置-nginx-conf，绝对路径，监听80或443端口一起" class="headerlink" title="局部配置 nginx.conf，绝对路径，监听80或443端口一起"></a>局部配置 nginx.conf，绝对路径，监听80或443端口一起</h4><blockquote><p>/home/heart/Documents/server/vuedjango/nginx.conf</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name _;</span><br><span class="line">    access_log /home/heart/Documents/server/vuedjango/logs/access.log;</span><br><span class="line">    error_log /home/heart/Documents/server/vuedjango/logs/error.log;</span><br><span class="line">    location / {</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8000;</span><br><span class="line">    }</span><br><span class="line">    location /static/ {</span><br><span class="line">        alias /home/heart/Documents/server/vuedjango/static/;</span><br><span class="line">        expires 30d;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="全局配置，系统级别"><a href="#全局配置，系统级别" class="headerlink" title="全局配置，系统级别"></a>全局配置，系统级别</h4><blockquote><p>include匹配局部配置*.conf</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">user root;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections 768;</span><br><span class="line">    use epoll;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                    '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                    '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">    # 访问日志</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    # server_tokens off;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/access.log;</span><br><span class="line">    error_log /var/log/nginx/error.log;</span><br><span class="line">    ##</span><br><span class="line">    # Virtual Host Configs</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /home/heart/Documents/server/vuedjango/*conf;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uwsgi uwsgi.ini</span><br><span class="line">sudo nginx -s reload</span><br><span class="line"><span class="comment"># or sudo service nginx restart</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>这时候不能直接访问8000端口，因为已经反向代理了，只能直接访问ip地址了。</p></blockquote><h2 id="supervisor进程管理，支持python3"><a href="#supervisor进程管理，支持python3" class="headerlink" title="supervisor进程管理，支持python3"></a>supervisor进程管理，支持python3</h2><blockquote><p>install</p></blockquote><p><code>pip install supervisor</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># general</span></span><br><span class="line">sudo echo_supervisord_conf &gt; /etc/supervisord.conf</span><br><span class="line">sudo vi /etc/supervisord.conf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.ini</span><br></pre></td></tr></tbody></table></figure><blockquote><p>新建</p></blockquote><p><code>sudo vi /etc/supervisord.d/vuedjango.ini</code></p><blockquote><p>program: 后面的vuedjango是你要识别的名字</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:vuedjango]</span><br><span class="line">command=uwsgi /home/heart/Documents/server/vuedjango/uwsgi.ini</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">redirect_stderr=true</span><br><span class="line"></span><br><span class="line">killasgroup=true </span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止 uwsgi uwsgi.ini 用supervisor来管理</span></span><br><span class="line">sudo supervisorctl reload</span><br><span class="line">sudo supervisorctl start vuedjango</span><br><span class="line">sudo supervisorctl status</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl stop vuedjango  <span class="comment"># 无法停止</span></span><br><span class="line">$ ps -aux | grep uwsgi</span><br><span class="line">heart     3520  0.0  3.1 127824 32332 ?        Sl   16:45   0:00 uwsgi /home/heart/Documents/server/vuedjango/uwsgi.ini</span><br><span class="line">heart     3521  0.0  2.9 126920 29908 ?        Sl   16:45   0:00 uwsgi /home/heart/Documents/server/vuedjango/uwsgi.ini</span><br><span class="line">heart     3522  0.0  2.9 126920 29908 ?        Sl   16:45   0:00 uwsgi /home/heart/Documents/server/vuedjango/uwsgi.ini</span><br><span class="line">heart     3628  0.0  0.0  11036   884 pts/1    S+   16:48   0:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn uwsgi</span><br><span class="line"></span><br><span class="line">$ killall uwsgi</span><br></pre></td></tr></tbody></table></figure><h2 id="无法停止的原因是开了4个线程-增加-master-true-重新启动supervisor就可以啦。"><a href="#无法停止的原因是开了4个线程-增加-master-true-重新启动supervisor就可以啦。" class="headerlink" title="无法停止的原因是开了4个线程, 增加 master = true 重新启动supervisor就可以啦。"></a>无法停止的原因是开了4个线程, 增加 master = true 重新启动supervisor就可以啦。</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uwsgi.ini</span></span><br><span class="line">processes = 4</span><br><span class="line">master = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器配置，一般来说官网最可靠。&quot;&gt;&lt;a href=&quot;#服务器配置，一般来说官网最可靠。&quot; class=&quot;headerlink&quot; title=&quot;服务器配置，一般来说官网最可靠。&quot;&gt;&lt;/a&gt;服务器配置，一般来说官网最可靠。&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;官
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://toyourheart163.github.io/tags/django/"/>
    
      <category term="nginx" scheme="https://toyourheart163.github.io/tags/nginx/"/>
    
      <category term="uwsgi" scheme="https://toyourheart163.github.io/tags/uwsgi/"/>
    
      <category term="supervisor" scheme="https://toyourheart163.github.io/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>python-site-packages-issues</title>
    <link href="https://toyourheart163.github.io/2019/12/31/python-site-packages-issues/"/>
    <id>https://toyourheart163.github.io/2019/12/31/python-site-packages-issues/</id>
    <published>2019-12-31T06:44:55.000Z</published>
    <updated>2021-03-12T10:36:26.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Matplotlib引用错误"><a href="#Matplotlib引用错误" class="headerlink" title="Matplotlib引用错误"></a>Matplotlib引用错误</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'matplotlib.pyplot'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ImportError: Matplotlib qt-based backends require an external PyQt4, PyQt5,</span><br><span class="line">PySide or PySide2 package to be installed, but it was not found.</span><br></pre></td></tr></tbody></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p><code>pip install PyQt5</code></p><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Matplotlib引用错误&quot;&gt;&lt;a href=&quot;#Matplotlib引用错误&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib引用错误&quot;&gt;&lt;/a&gt;Matplotlib引用错误&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://toyourheart163.github.io/tags/python/"/>
    
      <category term="issues" scheme="https://toyourheart163.github.io/tags/issues/"/>
    
  </entry>
  
  <entry>
    <title>git-flow-github-flow进阶</title>
    <link href="https://toyourheart163.github.io/2019/12/30/git-flow-github-flow/"/>
    <id>https://toyourheart163.github.io/2019/12/30/git-flow-github-flow/</id>
    <published>2019-12-30T10:11:41.000Z</published>
    <updated>2021-03-12T10:36:26.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-进阶"><a href="#git-进阶" class="headerlink" title="git 进阶"></a>git 进阶</h1><p>以下内容学习自IBM：曹志。感谢他的通俗易懂的解释。</p><h2 id="一、基础简介"><a href="#一、基础简介" class="headerlink" title="一、基础简介"></a>一、基础简介</h2><h3 id="系统级别配置"><a href="#系统级别配置" class="headerlink" title="系统级别配置"></a>系统级别配置</h3><p><code>git config --system -l</code></p><h3 id="ignore-忽略文件"><a href="#ignore-忽略文件" class="headerlink" title="ignore 忽略文件"></a>ignore 忽略文件</h3><table><thead><tr><th>模式</th><th>示例</th></tr></thead><tbody><tr><td>完整路径</td><td>db.sqlite3</td></tr><tr><td>/path</td><td>只匹配当前这个文件 /config.py</td></tr><tr><td>path</td><td>当前目录与递归目录的文件 *.pyc</td></tr><tr><td>path/</td><td>只匹配目录及其文件</td></tr><tr><td>带*</td><td>所有满足的条件 *.zip</td></tr><tr><td>带**</td><td>满足前后路径 Dev/**/dev.conf</td></tr><tr><td>!path</td><td>不忽略</td></tr></tbody></table><h2 id="二、基础配置"><a href="#二、基础配置" class="headerlink" title="二、基础配置"></a>二、基础配置</h2><h3 id="git-的三种状态"><a href="#git-的三种状态" class="headerlink" title="git 的三种状态"></a>git 的三种状态</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Modified(已修改)</span><br><span class="line">Staged(已暂存)  add/rm/mv  可用git add/rm/mv 保存到暂存区</span><br><span class="line">Commited(已提交)</span><br></pre></td></tr></tbody></table></figure><h3 id="三个工作区域"><a href="#三个工作区域" class="headerlink" title="三个工作区域"></a>三个工作区域</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工作区</span><br><span class="line">暂存区</span><br><span class="line">仓库目录 .git</span><br></pre></td></tr></tbody></table></figure><blockquote><p>暂存区 可以任意修改，保证提交历史的干净。另一个作用是开分支不想提交时git stash暂存和未暂存的保存到缓冲栈。比如我<code>git checkout -</code>把一点未暂存的丢失了</p></blockquote><h3 id="fetch-与-pull-区别"><a href="#fetch-与-pull-区别" class="headerlink" title="fetch 与 pull 区别"></a>fetch 与 pull 区别</h3><p>pull 相当于 git fetch &amp; git merge<br>就是先获取再合并。</p><h2 id="四、撤消"><a href="#四、撤消" class="headerlink" title="四、撤消"></a>四、撤消</h2><p>revert 回滚<br>提交一个commit覆盖前面的。要写一下原因。</p><p>恢复到某个commit</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log  # find id</span><br><span class="line">git reset --hard commit_id # 暴力操作。</span><br></pre></td></tr></tbody></table></figure><h2 id="五、分支管理策略"><a href="#五、分支管理策略" class="headerlink" title="五、分支管理策略"></a>五、分支管理策略</h2><h3 id="git-flow"><a href="#git-flow" class="headerlink" title="git flow"></a>git flow</h3><p>发布多个版本</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">master 生命周期长，项目开始就存在</span><br><span class="line">dev 长</span><br><span class="line">feature</span><br><span class="line">hotfixed</span><br><span class="line">releases</span><br></pre></td></tr></tbody></table></figure><h3 id="github-flow"><a href="#github-flow" class="headerlink" title="github flow"></a>github flow</h3><p>发布单一版本 master</p><p>用pull request代码评审</p><script>        document.querySelectorAll('.github-emojis')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-进阶&quot;&gt;&lt;a href=&quot;#git-进阶&quot; class=&quot;headerlink&quot; title=&quot;git 进阶&quot;&gt;&lt;/a&gt;git 进阶&lt;/h1&gt;&lt;p&gt;以下内容学习自IBM：曹志。感谢他的通俗易懂的解释。&lt;/p&gt;
&lt;h2 id=&quot;一、基础简介&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://toyourheart163.github.io/tags/git/"/>
    
  </entry>
  
</feed>
